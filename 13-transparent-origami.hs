import Data.List
testData =
  "6,10\n\
  \0,14\n\
  \9,10\n\
  \0,3\n\
  \10,4\n\
  \4,11\n\
  \6,0\n\
  \6,12\n\
  \4,1\n\
  \0,13\n\
  \10,12\n\
  \3,4\n\
  \3,0\n\
  \8,4\n\
  \1,10\n\
  \2,14\n\
  \8,10\n\
  \9,0\n\
  \\n\
  \fold along y=7\n\
  \fold along x=5"

realData = 
  "982,10\n\
  \1094,887\n\
  \895,815\n\
  \1216,453\n\
  \1258,747\n\
  \162,663\n\
  \552,568\n\
  \271,662\n\
  \333,863\n\
  \1252,65\n\
  \1009,687\n\
  \900,887\n\
  \199,273\n\
  \254,352\n\
  \345,787\n\
  \688,502\n\
  \825,325\n\
  \137,879\n\
  \1258,467\n\
  \547,42\n\
  \251,275\n\
  \446,628\n\
  \108,84\n\
  \1257,668\n\
  \1141,316\n\
  \679,548\n\
  \930,831\n\
  \463,700\n\
  \785,393\n\
  \485,578\n\
  \678,78\n\
  \1047,37\n\
  \1123,613\n\
  \586,535\n\
  \65,275\n\
  \1233,665\n\
  \137,15\n\
  \1115,210\n\
  \306,890\n\
  \946,234\n\
  \959,122\n\
  \518,814\n\
  \229,204\n\
  \985,439\n\
  \44,534\n\
  \48,838\n\
  \1258,483\n\
  \237,250\n\
  \763,852\n\
  \1134,117\n\
  \857,324\n\
  \674,310\n\
  \1032,537\n\
  \1148,809\n\
  \900,623\n\
  \549,178\n\
  \157,137\n\
  \721,247\n\
  \244,623\n\
  \584,351\n\
  \438,518\n\
  \527,674\n\
  \1292,86\n\
  \977,618\n\
  \420,667\n\
  \1170,812\n\
  \445,627\n\
  \438,887\n\
  \224,814\n\
  \1263,197\n\
  \738,409\n\
  \1262,504\n\
  \393,199\n\
  \1302,16\n\
  \259,50\n\
  \934,357\n\
  \470,451\n\
  \460,414\n\
  \552,684\n\
  \585,789\n\
  \1131,367\n\
  \23,346\n\
  \1089,245\n\
  \827,42\n\
  \200,819\n\
  \917,666\n\
  \1295,807\n\
  \58,289\n\
  \678,816\n\
  \1201,497\n\
  \176,320\n\
  \269,716\n\
  \130,602\n\
  \826,854\n\
  \758,344\n\
  \1009,262\n\
  \499,60\n\
  \1191,329\n\
  \905,453\n\
  \1262,761\n\
  \180,82\n\
  \162,309\n\
  \189,658\n\
  \547,341\n\
  \460,793\n\
  \1285,434\n\
  \162,809\n\
  \189,684\n\
  \48,761\n\
  \708,147\n\
  \378,884\n\
  \15,807\n\
  \751,395\n\
  \1163,831\n\
  \708,35\n\
  \484,40\n\
  \827,597\n\
  \1243,789\n\
  \15,620\n\
  \281,381\n\
  \944,773\n\
  \221,875\n\
  \1203,456\n\
  \1126,3\n\
  \1272,325\n\
  \137,572\n\
  \518,528\n\
  \171,297\n\
  \1073,644\n\
  \711,753\n\
  \137,836\n\
  \902,210\n\
  \90,318\n\
  \976,532\n\
  \185,546\n\
  \1272,345\n\
  \681,465\n\
  \796,82\n\
  \826,317\n\
  \208,628\n\
  \1255,680\n\
  \77,665\n\
  \1183,526\n\
  \181,647\n\
  \857,570\n\
  \290,884\n\
  \294,406\n\
  \974,767\n\
  \974,575\n\
  \596,381\n\
  \1148,757\n\
  \1164,28\n\
  \1215,340\n\
  \850,190\n\
  \89,740\n\
  \661,651\n\
  \1310,75\n\
  \893,602\n\
  \999,870\n\
  \1113,379\n\
  \1300,135\n\
  \925,551\n\
  \596,737\n\
  \770,404\n\
  \662,653\n\
  \184,136\n\
  \6,294\n\
  \930,483\n\
  \713,579\n\
  \803,24\n\
  \763,135\n\
  \585,105\n\
  \694,325\n\
  \179,611\n\
  \699,278\n\
  \82,572\n\
  \147,831\n\
  \661,549\n\
  \18,361\n\
  \1164,448\n\
  \976,362\n\
  \1205,492\n\
  \663,54\n\
  \912,127\n\
  \1240,44\n\
  \813,345\n\
  \740,243\n\
  \1014,10\n\
  \530,121\n\
  \1222,308\n\
  \218,702\n\
  \710,341\n\
  \1057,250\n\
  \0,317\n\
  \961,124\n\
  \57,271\n\
  \585,278\n\
  \1190,627\n\
  \671,172\n\
  \716,579\n\
  \1081,432\n\
  \782,422\n\
  \179,472\n\
  \1101,388\n\
  \263,597\n\
  \1226,651\n\
  \982,458\n\
  \796,760\n\
  \467,579\n\
  \1146,663\n\
  \1228,322\n\
  \914,217\n\
  \382,894\n\
  \872,518\n\
  \363,99\n\
  \209,53\n\
  \1148,585\n\
  \475,646\n\
  \38,345\n\
  \458,852\n\
  \319,278\n\
  \200,747\n\
  \1141,662\n\
  \648,241\n\
  \140,642\n\
  \887,453\n\
  \120,179\n\
  \623,679\n\
  \1283,539\n\
  \508,28\n\
  \383,5\n\
  \1170,642\n\
  \716,331\n\
  \420,543\n\
  \262,807\n\
  \237,154\n\
  \927,835\n\
  \857,122\n\
  \1019,795\n\
  \753,652\n\
  \518,808\n\
  \140,700\n\
  \996,789\n\
  \719,149\n\
  \127,220\n\
  \890,799\n\
  \768,393\n\
  \253,250\n\
  \1091,365\n\
  \1036,707\n\
  \45,211\n\
  \1079,117\n\
  \57,789\n\
  \845,98\n\
  \977,326\n\
  \751,843\n\
  \320,824\n\
  \397,434\n\
  \140,194\n\
  \448,235\n\
  \1146,585\n\
  \60,255\n\
  \1251,605\n\
  \594,331\n\
  \597,346\n\
  \1213,652\n\
  \1111,273\n\
  \82,85\n\
  \619,289\n\
  \89,74\n\
  \1021,558\n\
  \18,808\n\
  \376,357\n\
  \415,815\n\
  \137,711\n\
  \647,54\n\
  \619,605\n\
  \1061,441\n\
  \425,690\n\
  \905,217\n\
  \216,875\n\
  \555,73\n\
  \671,807\n\
  \1310,317\n\
  \1273,425\n\
  \1136,494\n\
  \1200,824\n\
  \527,560\n\
  \1258,259\n\
  \775,329\n\
  \1101,53\n\
  \288,325\n\
  \206,101\n\
  \67,423\n\
  \473,602\n\
  \806,768\n\
  \1221,740\n\
  \699,502\n\
  \453,122\n\
  \1279,175\n\
  \557,320\n\
  \877,649\n\
  \251,619\n\
  \474,84\n\
  \1203,553\n\
  \217,688\n\
  \1130,476\n\
  \557,126\n\
  \214,477\n\
  \293,449\n\
  \714,157\n\
  \749,117\n\
  \549,850\n\
  \333,774\n\
  \925,445\n\
  \600,362\n\
  \1305,91\n\
  \934,628\n\
  \326,877\n\
  \1192,259\n\
  \582,576\n\
  \68,117\n\
  \301,499\n\
  \596,157\n\
  \883,796\n\
  \599,889\n\
  \766,287\n\
  \982,595\n\
  \468,312\n\
  \430,219\n\
  \1041,716\n\
  \649,243\n\
  \1116,345\n\
  \768,865\n\
  \412,355\n\
  \1052,105\n\
  \1198,571\n\
  \497,773\n\
  \1081,14\n\
  \1084,309\n\
  \293,445\n\
  \542,865\n\
  \1119,86\n\
  \930,747\n\
  \716,315\n\
  \1034,10\n\
  \1278,406\n\
  \934,852\n\
  \514,760\n\
  \164,232\n\
  \497,809\n\
  \1155,644\n\
  \1304,294\n\
  \1173,15\n\
  \600,782\n\
  \187,281\n\
  \852,42\n\
  \1056,352\n\
  \763,589\n\
  \185,98\n\
  \80,747\n\
  \1238,318\n\
  \140,252\n\
  \818,679\n\
  \80,658\n\
  \499,698\n\
  \95,51\n\
  \320,70\n\
  \984,877\n\
  \318,319\n\
  \234,227\n\
  \421,777\n\
  \187,21\n\
  \60,563\n\
  \1057,644\n\
  \395,641\n\
  \403,171\n\
  \458,70\n\
  \445,659\n\
  \597,623\n\
  \60,479\n\
  \37,105\n\
  \820,309\n\
  \32,392\n\
  \1086,366\n\
  \353,744\n\
  \82,124\n\
  \507,24\n\
  \474,866\n\
  \1079,441\n\
  \273,194\n\
  \1170,252\n\
  \416,572\n\
  \326,429\n\
  \1052,329\n\
  \562,239\n\
  \689,841\n\
  \591,149\n\
  \1089,651\n\
  \826,488\n\
  \274,383\n\
  \959,469\n\
  \1292,310\n\
  \719,597\n\
  \990,308\n\
  \673,471\n\
  \686,10\n\
  \1102,259\n\
  \1208,326\n\
  \17,23\n\
  \761,626\n\
  \1166,422\n\
  \328,884\n\
  \278,852\n\
  \1241,278\n\
  \263,37\n\
  \244,53\n\
  \843,579\n\
  \990,362\n\
  \755,423\n\
  \446,259\n\
  \335,610\n\
  \393,703\n\
  \1108,569\n\
  \836,84\n\
  \170,742\n\
  \765,170\n\
  \970,105\n\
  \465,658\n\
  \714,737\n\
  \763,813\n\
  \303,469\n\
  \992,575\n\
  \1145,567\n\
  \10,135\n\
  \12,264\n\
  \792,534\n\
  \810,575\n\
  \209,235\n\
  \52,35\n\
  \537,627\n\
  \1123,281\n\
  \517,183\n\
  \1033,208\n\
  \343,696\n\
  \1245,275\n\
  \991,616\n\
  \596,605\n\
  \1228,533\n\
  \656,436\n\
  \950,831\n\
  \880,770\n\
  \781,234\n\
  \1153,549\n\
  \1130,364\n\
  \380,595\n\
  \365,660\n\
  \185,12\n\
  \474,810\n\
  \547,852\n\
  \726,351\n\
  \639,172\n\
  \334,756\n\
  \69,168\n\
  \1304,742\n\
  \1184,422\n\
  \231,453\n\
  \1213,242\n\
  \856,299\n\
  \288,569\n\
  \636,584\n\
  \1104,101\n\
  \835,611\n\
  \1081,515\n\
  \1241,504\n\
  \1153,773\n\
  \156,40\n\
  \662,488\n\
  \544,287\n\
  \1310,10\n\
  \1153,345\n\
  \137,183\n\
  \1163,876\n\
  \1121,731\n\
  \518,360\n\
  \473,647\n\
  \1255,214\n\
  \242,355\n\
  \970,341\n\
  \333,618\n\
  \180,250\n\
  \716,663\n\
  \380,511\n\
  \776,627\n\
  \380,747\n\
  \802,0\n\
  \1295,620\n\
  \925,343\n\
  \636,86\n\
  \246,7\n\
  \874,362\n\
  \333,887\n\
  \75,198\n\
  \261,666\n\
  \793,836\n\
  \827,149\n\
  \130,292\n\
  \1146,309\n\
  \793,711\n\
  \974,127\n\
  \1134,544\n\
  \796,812\n\
  \989,618\n\
  \430,80\n\
  \497,85\n\
  \1009,150\n\
  \80,595\n\
  \343,847\n\
  \740,651\n\
  \629,520\n\
  \1163,422\n\
  \363,347\n\
  \984,429\n\
  \1253,579\n\
  \341,498\n\
  \435,789\n\
  \1207,294\n\
  \492,348\n\
  \127,674\n\
  \549,47\n\
  \661,354\n\
  \622,502\n\
  \759,294\n\
  \930,595\n\
  \1218,655\n\
  \144,757\n\
  \910,749\n\
  \1203,135\n\
  \796,816\n\
  \1253,693\n\
  \693,336\n\
  \874,282\n\
  \649,578\n\
  \334,653\n\
  \380,63\n\
  \656,765\n\
  \560,553\n\
  \457,1\n\
  \237,644\n\
  \984,884\n\
  \542,323\n\
  \55,589\n\
  \770,40\n\
  \512,218\n\
  \112,393\n\
  \1036,187\n\
  \219,38\n\
  \837,247\n\
  \360,392\n\
  \1253,5\n\
  \808,46\n\
  \631,346\n\
  \782,248\n\
  \37,10\n\
  \301,262\n\
  \87,463\n\
  \781,525\n\
  \803,831\n\
  \179,367\n\
  \229,880\n\
  \1004,442\n\
  \1126,891\n\
  \147,63\n\
  \381,418\n\
  \32,502\n\
  \483,490\n\
  \954,518\n\
  \1084,361\n\
  \52,427\n\
  \545,497\n\
  \408,371\n\
  \827,404\n\
  \1211,423\n\
  \528,248\n\
  \135,497\n\
  \436,362\n\
  \52,707\n\
  \713,623\n\
  \462,824\n\
  \1285,15\n\
  \187,613\n\
  \825,578\n\
  \130,490\n\
  \495,441\n\
  \237,602\n\
  \508,194\n\
  \393,666\n\
  \1037,476\n\
  \1121,796\n\
  \1036,511\n\
  \1193,625\n\
  \982,884\n\
  \1064,147\n\
  \725,12\n\
  \291,617\n\
  \919,597\n\
  \108,560\n\
  \328,877\n\
  \403,723\n\
  \484,294\n\
  \627,355\n\
  \763,81\n\
  \109,2\n\
  \691,289\n\
  \453,570\n\
  \190,814\n\
  \271,232\n\
  \1278,488\n\
  \907,171\n\
  \1015,231\n\
  \945,201\n\
  \1221,74\n\
  \1086,120\n\
  \254,542\n\
  \1081,686\n\
  \826,294\n\
  \393,695\n\
  \504,126\n\
  \836,810\n\
  \1130,530\n\
  \749,329\n\
  \5,540\n\
  \1267,145\n\
  \1125,546\n\
  \766,824\n\
  \572,389\n\
  \1295,422\n\
  \1051,844\n\
  \88,124\n\
  \1230,595\n\
  \890,95\n\
  \169,680\n\
  \164,214\n\
  \1094,7\n\
  \930,35\n\
  \1094,831\n\
  \813,773\n\
  \753,320\n\
  \525,515\n\
  \290,635\n\
  \25,744\n\
  \629,15\n\
  \1076,799\n\
  \1089,875\n\
  \1173,711\n\
  \880,124\n\
  \181,602\n\
  \103,294\n\
  \930,299\n\
  \542,193\n\
  \95,395\n\
  \0,877\n\
  \340,630\n\
  \599,441\n\
  \864,259\n\
  \1129,602\n\
  \364,187\n\
  \890,667\n\
  \929,220\n\
  \865,501\n\
  \1202,84\n\
  \877,243\n\
  \18,533\n\
  \792,814\n\
  \1272,569\n\
  \873,276\n\
  \155,834\n\
  \853,1\n\
  \1148,886\n\
  \764,670\n\
  \1230,236\n\
  \585,385\n\
  \108,670\n\
  \1088,605\n\
  \436,702\n\
  \818,546\n\
  \15,870\n\
  \551,294\n\
  \410,299\n\
  \810,319\n\
  \1081,242\n\
  \975,610\n\
  \1066,361\n\
  \333,467\n\
  \1215,395\n\
  \432,289\n\
  \408,147\n\
  \639,807\n\
  \305,124\n\
  \152,232\n\
  \602,187\n\
  \1053,49\n\
  \244,85\n\
  \191,86\n\
  \1096,234\n\
  \82,147\n\
  \782,646\n\
  \1081,208\n\
  \852,852\n\
  \928,58\n\
  \43,278\n\
  \57,665\n\
  \1217,609\n\
  \437,838\n\
  \462,376\n\
  \525,893\n\
  \524,292\n\
  \738,837\n\
  \52,187\n\
  \872,159\n\
  \261,247\n\
  \873,504\n\
  \169,662\n\
  \1129,647\n\
  \385,178\n\
  \200,595\n\
  \562,655\n\
  \249,453\n\
  \1262,56\n\
  \103,600\n\
  \278,357\n\
  \930,147\n\
  \229,275\n\
  \48,504\n\
  \229,462\n\
  \547,135\n\
  \1089,467\n\
  \761,492\n\
  \15,274\n\
  \1228,847\n\
  \383,423\n\
  \609,795\n\
  \880,568\n\
  \811,250\n\
  \888,399\n\
  \927,59\n\
  \1139,597\n\
  \192,518\n\
  \977,887\n\
  \483,404\n\
  \1037,504\n\
  \1253,229\n\
  \448,101\n\
  \522,380\n\
  \545,728\n\
  \95,340\n\
  \864,266\n\
  \1292,808\n\
  \142,676\n\
  \1215,843\n\
  \401,708\n\
  \880,331\n\
  \162,886\n\
  \967,422\n\
  \1175,497\n\
  \157,533\n\
  \1295,274\n\
  \48,56\n\
  \547,813\n\
  \898,539\n\
  \1126,443\n\
  \932,458\n\
  \1059,619\n\
  \184,539\n\
  \547,387\n\
  \274,411\n\
  \925,178\n\
  \484,317\n\
  \589,320\n\
  \589,23\n\
  \915,105\n\
  \1171,794\n\
  \459,684\n\
  \1245,890\n\
  \217,618\n\
  \828,15\n\
  \57,5\n\
  \469,546\n\
  \967,696\n\
  \674,533\n\
  \475,395\n\
  \361,561\n\
  \165,567\n\
  \699,33\n\
  \676,4\n\
  \761,268\n\
  \863,257\n\
  \200,75\n\
  \396,217\n\
  \470,193\n\
  \929,418\n\
  \124,345\n\
  \162,585\n\
  \60,639\n\
  \376,728\n\
  \43,145\n\
  \37,425\n\
  \751,106\n\
  \318,767\n\
  \570,243\n\
  \656,129\n\
  \508,0\n\
  \528,24\n\
  \80,819\n\
  \555,471\n\
  \1036,383\n\
  \1027,705\n\
  \599,141\n\
  \195,210\n\
  \157,361\n\
  \586,105\n\
  \364,707\n\
  \1305,757\n\
  \1072,348\n\
  \711,305\n\
  \959,91\n\
  \381,674\n\
  \1015,679\n\
  \311,198\n\
  \222,605\n\
  \528,870\n\
  \1180,602\n\
  \1165,740\n\
  \499,834\n\
  \229,242\n\
  \1037,838\n\
  \1118,824\n\
  \1064,684\n\
  \679,133\n\
  \1285,744\n\
  \192,376\n\
  \196,70\n\
  \710,500\n\
  \1006,101\n\
  \1131,472\n\
  \632,78\n\
  \1119,808\n\
  \902,371\n\
  \691,347\n\
  \159,5\n\
  \378,436\n\
  \594,31\n\
  \758,568\n\
  \962,679\n\
  \257,105\n\
  \425,652\n\
  \328,465\n\
  \1020,635\n\
  \433,649\n\
  \1121,658\n\
  \1071,82\n\
  \1093,56\n\
  \755,471\n\
  \761,21\n\
  \93,609\n\
  \179,646\n\
  \100,585\n\
  \295,231\n\
  \1283,91\n\
  \1173,431\n\
  \557,652\n\
  \396,341\n\
  \992,319\n\
  \320,308\n\
  \1146,231\n\
  \216,600\n\
  \1258,635\n\
  \700,360\n\
  \94,341\n\
  \913,789\n\
  \1068,91\n\
  \1250,639\n\
  \502,232\n\
  \1115,658\n\
  \102,98\n\
  \1203,507\n\
  \1191,565\n\
  \401,260\n\
  \599,453\n\
  \602,147\n\
  \60,679\n\
  \706,169\n\
  \114,854\n\
  \1141,680\n\
  \360,831\n\
  \738,505\n\
  \1086,80\n\
  \1170,700\n\
  \946,707\n\
  \1064,7\n\
  \126,422\n\
  \1004,890\n\
  \544,607\n\
  \1170,526\n\
  \801,824\n\
  \117,267\n\
  \1267,189\n\
  \928,894\n\
  \701,795\n\
  \865,267\n\
  \274,467\n\
  \31,719\n\
  \43,705\n\
  \396,553\n\
  \484,630\n\
  \758,684\n\
  \107,456\n\
  \542,501\n\
  \365,201\n\
  \572,837\n\
  \144,137\n\
  \333,7\n\
  \77,229\n\
  \1243,105\n\
  \1165,824\n\
  \194,414\n\
  \333,455\n\
  \172,431\n\
  \1086,774\n\
  \765,497\n\
  \1128,86\n\
  \328,299\n\
  \892,318\n\
  \504,768\n\
  \545,892\n\
  \157,757\n\
  \565,74\n\
  \753,59\n\
  \773,267\n\
  \1215,51\n\
  \383,59\n\
  \710,112\n\
  \1235,143\n\
  \895,79\n\
  \1104,316\n\
  \31,175\n\
  \517,611\n\
  \1203,387\n\
  \544,635\n\
  \872,887\n\
  \1201,28\n\
  \1037,390\n\
  \460,190\n\
  \835,248\n\
  \438,691\n\
  \677,348\n\
  \277,208\n\
  \1056,542\n\
  \765,688\n\
  \985,455\n\
  \340,105\n\
  \1039,507\n\
  \1019,347\n\
  \703,88\n\
  \88,586\n\
  \589,275\n\
  \639,759\n\
  \1051,50\n\
  \1121,684\n\
  \23,735\n\
  \52,483\n\
  \1125,12\n\
  \492,585\n\
  \840,539\n\
  \\n\
  \fold along x=655\n\
  \fold along y=447\n\
  \fold along x=327\n\
  \fold along y=223\n\
  \fold along x=163\n\
  \fold along y=111\n\
  \fold along x=81\n\
  \fold along y=55\n\
  \fold along x=40\n\
  \fold along y=27\n\
  \fold along y=13\n\
  \fold along y=6"

data Axis = X | Y deriving(Show)
type Fold = (Axis, Int)
type Point = (Int, Int)
type Sheet = [Point]
type Problem = (Sheet, [Fold])

generateGraphicRows :: Sheet -> [String]
generateGraphicRows s = map (\y -> generateGraphicRow (filter (\(px, py) -> y == py) s)) [0..5] 

generateGraphicRow :: [Point] -> String
generateGraphicRow [] = take 40 ['.', '.' ..]
generateGraphicRow ((x,_):ps) = take x lastRow ++ "#" ++ drop (x + 1) lastRow
  where lastRow = generateGraphicRow ps

writeLines :: [String] -> IO ()
writeLines lines = do
  putStrLn (lines !! 0)
  putStrLn (lines !! 1)
  putStrLn (lines !! 2)
  putStrLn (lines !! 3)
  putStrLn (lines !! 4)
  putStrLn (lines !! 5)

answer1 :: String -> Int 
answer1 d = length sheet
  where (sheet, _) = applyFolds $ generateProblem d

generateProblem :: String -> Problem
generateProblem d = (generatePoints points, generateFolds folds)
  where (points, folds) = splitInput d

splitInput :: String -> ([String], [String])
splitInput d = (fst inputLines, tail $ snd inputLines)
  where inputLines = break (== "") $ lines d

generatePoints :: [String] -> [Point]
generatePoints [] = []
generatePoints (p:ps) = (generatePoint p):(generatePoints ps)

generatePoint :: String -> Point
generatePoint p = (read $ fst pt, read $ tail $ snd pt)
  where pt = break (== ',') p

generateFolds :: [String] -> [Fold]
generateFolds [] = []
generateFolds (f:fs) = (generateFold f):(generateFolds fs)

generateFold :: String -> Fold
generateFold f = (if (last $ fst fold) == 'x' then X else Y, read $ tail $ snd fold)  
  where fold = break (== '=') f

applyFolds :: Problem -> Problem
applyFolds (sh, []) = (sort $ nub sh, [])
applyFolds (sh, f:fs) = applyFolds (applyFold f sh, fs)

applyFold :: Fold -> Sheet -> Sheet
applyFold (X, x) sh = applyHorizontalFold x sh
applyFold (Y, y) sh = applyVerticalFold y sh

applyHorizontalFold :: Int -> Sheet -> Sheet
applyHorizontalFold x sh = map (applyHorizontalFoldToPoint x) sh

applyHorizontalFoldToPoint :: Int -> Point -> Point
applyHorizontalFoldToPoint x (px, py) = if px > x then (px - (2 * (px - x)), py) else (px, py)

applyVerticalFold :: Int -> Sheet -> Sheet
applyVerticalFold y sh = map (applyVerticalFoldToPoint y) sh

applyVerticalFoldToPoint :: Int -> Point -> Point
applyVerticalFoldToPoint y (px, py) = if py > y then (px, py - (2 * (py - y))) else (px, py)
